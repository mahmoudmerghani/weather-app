(()=>{"use strict";var n={208:(n,e,r)=>{r.d(e,{A:()=>s});var t=r(354),i=r.n(t),a=r(314),o=r.n(a)()(i());o.push([n.id,"* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: Arial, Helvetica, sans-serif;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    min-height: 100vh;\n    background-color: #f0f0f0;\n}\n\nbutton {\n    background: none;\n    border: none;\n    cursor: pointer;\n}\n\nimg {\n    height: 3rem;\n    width: auto;\n}\n\n.wrapper {\n    width: 700px;\n}\n\n.search {\n    display: flex;\n    margin-bottom: 1rem;\n\n}\n\n.search > input {\n    flex: 1;\n}\n\n#search {\n    padding: 0.5rem;\n    border-radius: 10px;\n    border: 1px solid #ccc;\n}\n\n.search > button {\n    margin-left: 1rem;\n    padding: 0.5rem;\n    border-radius: 10px;\n    background-color: #007bff;\n    color: white;\n    min-width: 100px;\n}\n\n.container {\n    background-color: white;\n    padding: 1rem;\n    border-radius: 10px;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n    display: none;\n}\n\n.container > *:not(:last-child) {\n    margin-bottom: 2rem;\n}\n\n.header {\n    display: flex;\n    justify-content: space-between;\n}\n\n.temperature {\n    display: flex;\n    align-items: center;\n    gap: 5px;\n}\n\n.temperature h2 {\n    font-size: 3rem;\n}\n\n.temperature .controls {\n    align-self: flex-start;\n}\n\n.time {\n    text-align: center;\n}\n\nnav {\n    display: flex;\n    text-align: center;\n}\n\nnav > * {\n    flex: 1;\n}\n\n.day {\n    padding: 1rem;\n    cursor: pointer;\n    border-radius: 10px;\n}\n\n.day.selected {\n    background-color: #f0f0f0;\n}\n\n.location {\n    text-align: center;\n    font-size: 2rem;\n}\n\n.controls button.selected {\n    font-weight: 900;\n}\n\n.controls button {\n    font-weight: 100;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,UAAU;IACV,sBAAsB;AAC1B;;AAEA;IACI,yCAAyC;IACzC,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,iBAAiB;IACjB,yBAAyB;AAC7B;;AAEA;IACI,gBAAgB;IAChB,YAAY;IACZ,eAAe;AACnB;;AAEA;IACI,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,mBAAmB;;AAEvB;;AAEA;IACI,OAAO;AACX;;AAEA;IACI,eAAe;IACf,mBAAmB;IACnB,sBAAsB;AAC1B;;AAEA;IACI,iBAAiB;IACjB,eAAe;IACf,mBAAmB;IACnB,yBAAyB;IACzB,YAAY;IACZ,gBAAgB;AACpB;;AAEA;IACI,uBAAuB;IACvB,aAAa;IACb,mBAAmB;IACnB,uCAAuC;IACvC,aAAa;AACjB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,8BAA8B;AAClC;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,QAAQ;AACZ;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,kBAAkB;AACtB;;AAEA;IACI,OAAO;AACX;;AAEA;IACI,aAAa;IACb,eAAe;IACf,mBAAmB;AACvB;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,kBAAkB;IAClB,eAAe;AACnB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,gBAAgB;AACpB",sourcesContent:["* {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n}\r\n\r\nbody {\r\n    font-family: Arial, Helvetica, sans-serif;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    min-height: 100vh;\r\n    background-color: #f0f0f0;\r\n}\r\n\r\nbutton {\r\n    background: none;\r\n    border: none;\r\n    cursor: pointer;\r\n}\r\n\r\nimg {\r\n    height: 3rem;\r\n    width: auto;\r\n}\r\n\r\n.wrapper {\r\n    width: 700px;\r\n}\r\n\r\n.search {\r\n    display: flex;\r\n    margin-bottom: 1rem;\r\n\r\n}\r\n\r\n.search > input {\r\n    flex: 1;\r\n}\r\n\r\n#search {\r\n    padding: 0.5rem;\r\n    border-radius: 10px;\r\n    border: 1px solid #ccc;\r\n}\r\n\r\n.search > button {\r\n    margin-left: 1rem;\r\n    padding: 0.5rem;\r\n    border-radius: 10px;\r\n    background-color: #007bff;\r\n    color: white;\r\n    min-width: 100px;\r\n}\r\n\r\n.container {\r\n    background-color: white;\r\n    padding: 1rem;\r\n    border-radius: 10px;\r\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n    display: none;\r\n}\r\n\r\n.container > *:not(:last-child) {\r\n    margin-bottom: 2rem;\r\n}\r\n\r\n.header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n}\r\n\r\n.temperature {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 5px;\r\n}\r\n\r\n.temperature h2 {\r\n    font-size: 3rem;\r\n}\r\n\r\n.temperature .controls {\r\n    align-self: flex-start;\r\n}\r\n\r\n.time {\r\n    text-align: center;\r\n}\r\n\r\nnav {\r\n    display: flex;\r\n    text-align: center;\r\n}\r\n\r\nnav > * {\r\n    flex: 1;\r\n}\r\n\r\n.day {\r\n    padding: 1rem;\r\n    cursor: pointer;\r\n    border-radius: 10px;\r\n}\r\n\r\n.day.selected {\r\n    background-color: #f0f0f0;\r\n}\r\n\r\n.location {\r\n    text-align: center;\r\n    font-size: 2rem;\r\n}\r\n\r\n.controls button.selected {\r\n    font-weight: 900;\r\n}\r\n\r\n.controls button {\r\n    font-weight: 100;\r\n}"],sourceRoot:""}]);const s=o},314:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var r="",t=void 0!==e[5];return e[4]&&(r+="@supports (".concat(e[4],") {")),e[2]&&(r+="@media ".concat(e[2]," {")),t&&(r+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),r+=n(e),t&&(r+="}"),e[2]&&(r+="}"),e[4]&&(r+="}"),r})).join("")},e.i=function(n,r,t,i,a){"string"==typeof n&&(n=[[null,n,void 0]]);var o={};if(t)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(o[c]=!0)}for(var A=0;A<n.length;A++){var d=[].concat(n[A]);t&&o[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),r&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=r):d[2]=r),i&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=i):d[4]="".concat(i)),e.push(d))}},e}},354:n=>{n.exports=function(n){var e=n[1],r=n[3];if(!r)return e;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),a="/*# ".concat(i," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},72:n=>{var e=[];function r(n){for(var r=-1,t=0;t<e.length;t++)if(e[t].identifier===n){r=t;break}return r}function t(n,t){for(var a={},o=[],s=0;s<n.length;s++){var c=n[s],A=t.base?c[0]+t.base:c[0],d=a[A]||0,u="".concat(A," ").concat(d);a[A]=d+1;var l=r(u),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==l)e[l].references++,e[l].updater(p);else{var m=i(p,t);t.byIndex=s,e.splice(s,0,{identifier:u,updater:m,references:1})}o.push(u)}return o}function i(n,e){var r=e.domAPI(e);return r.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;r.update(n=e)}else r.remove()}}n.exports=function(n,i){var a=t(n=n||[],i=i||{});return function(n){n=n||[];for(var o=0;o<a.length;o++){var s=r(a[o]);e[s].references--}for(var c=t(n,i),A=0;A<a.length;A++){var d=r(a[A]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}a=c}}},659:n=>{var e={};n.exports=function(n,r){var t=function(n){if(void 0===e[n]){var r=document.querySelector(n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(n){r=null}e[n]=r}return e[n]}(n);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(r)}},540:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},56:(n,e,r)=>{n.exports=function(n){var e=r.nc;e&&n.setAttribute("nonce",e)}},825:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(r){!function(n,e,r){var t="";r.supports&&(t+="@supports (".concat(r.supports,") {")),r.media&&(t+="@media ".concat(r.media," {"));var i=void 0!==r.layer;i&&(t+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),t+=r.css,i&&(t+="}"),r.media&&(t+="}"),r.supports&&(t+="}");var a=r.sourceMap;a&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(t,n,e.options)}(e,n,r)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},113:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function r(t){var i=e[t];if(void 0!==i)return i.exports;var a=e[t]={id:t,exports:{}};return n[t](a,a.exports,r),a.exports}r.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return r.d(e,{a:e}),e},r.d=(n,e)=>{for(var t in e)r.o(e,t)&&!r.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:e[t]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),r.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;r.g.importScripts&&(n=r.g.location+"");var e=r.g.document;if(!n&&e&&(e.currentScript&&"SCRIPT"===e.currentScript.tagName.toUpperCase()&&(n=e.currentScript.src),!n)){var t=e.getElementsByTagName("script");if(t.length)for(var i=t.length-1;i>-1&&(!n||!/^http(s?):/.test(n));)n=t[i--].src}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=n})(),r.nc=void 0;var t=r(72),i=r.n(t),a=r(825),o=r.n(a),s=r(659),c=r.n(s),A=r(56),d=r.n(A),u=r(540),l=r.n(u),p=r(113),m=r.n(p),h=r(208),f={};f.styleTagTransform=m(),f.setAttributes=d(),f.insert=c().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=l(),i()(h.A,f),h.A&&h.A.locals&&h.A.locals;class g{static celsiusToFahrenheit(n){return 9*n/5+32}static kphToMph(n){return.621371*n}static formatEpochTime(n,e){const r={weekday:"long",hour:"numeric",minute:"2-digit",hour12:!0,timeZone:e};return new Date(n).toLocaleString("en-US",r)}static getShortDayName(n,e){return new Date(n).toLocaleDateString("en-US",{weekday:"short",timeZone:e})}static getMetricWeek(n){const e=n.timezone,r=(new Date).toLocaleString("en-US",{timeZone:e}),t=new Date(r).getHours();return n.days.slice(0,7).map((r=>{const i=r.hours[t];return{type:"metric",speedUnit:"km/h",shortDay:this.getShortDayName(1e3*Number(i.datetimeEpoch),e),temp:Math.round(i.temp),condition:i.conditions,icon:i.icon,address:n.resolvedAddress,time:this.formatEpochTime(1e3*Number(i.datetimeEpoch),e),precipitation:Math.round(i.precip),humidity:Math.round(i.humidity),wind:Math.round(i.windspeed),max:Math.round(r.tempmax),min:Math.round(r.tempmin)}}))}static getImperialWeek(n){return this.getMetricWeek(n).map((n=>({...n,type:"imperial",speedUnit:"mph",temp:Math.round(this.celsiusToFahrenheit(Number(n.temp))),wind:Math.round(this.kphToMph(Number(n.wind))),max:Math.round(this.celsiusToFahrenheit(Number(n.max))),min:Math.round(this.celsiusToFahrenheit(Number(n.min)))})))}static async getWeatherData(n,e){const r=`https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/${n}?key=${e}&unitGroup=metric`,t=await fetch(r);if(!t.ok)throw new Error(`Error fetching weather data: ${t.statusText}`);return await t.json()}}const v={"clear-day":r.p+"37a1063bc3eca037fb84.svg","clear-night":r.p+"e97d5e3426e256b7da64.svg","partly-cloudy-day":r.p+"a3d75a37ffc4388e6d41.svg","partly-cloudy-night":r.p+"198f1680ebc587c35ea5.svg",cloudy:r.p+"1092743a5dfa523bf0d4.svg",wind:r.p+"9734d4d16243a7d1b912.svg",fog:r.p+"6d6cd418fd1d6a489b7c.svg",rain:r.p+"a8a5ea1659fc8187cd23.svg",snow:r.p+"652787eff83076eb40a8.svg"};new class{API_KEY="X6WS2JMR5ETMBW469W9GKPJAH";metricWeek;imperialWeek;currentWeek;currentDayIndex;constructor(){this.init()}init(){const n=document.getElementById("weather"),e=document.getElementById("search"),r=document.getElementById("searchBtn");r.addEventListener("click",(async()=>{try{const r=e.value,t=await g.getWeatherData(r,this.API_KEY);this.metricWeek=g.getMetricWeek(t),this.imperialWeek=g.getImperialWeek(t),this.currentWeek=this.metricWeek,this.currentDayIndex=0,n.style.display="block",this.renderWeather()}catch(n){console.log(n),alert("Error, Check internet connection and try again")}})),n.addEventListener("click",(n=>{const e=n.target.closest(".day");return e?(this.currentDayIndex=e.id,void this.renderWeather()):"celsius"===n.target.id?(this.currentWeek=this.metricWeek,void this.renderWeather()):"fahrenheit"===n.target.id?(this.currentWeek=this.imperialWeek,void this.renderWeather()):void 0})),document.addEventListener("keypress",(n=>{"Enter"===n.key&&r.click()}))}renderWeather(){const n=this.currentWeek[this.currentDayIndex];document.getElementById("weather").innerHTML=`\n        <div class="main">\n            <div class="header">\n                <div class="temperature">\n                    <img src="${v[n.icon]||v["clear-day"]}" alt="${n.condition}">\n                    <h2>${n.temp}</h2>\n                    <div class="controls">\n                        <button id="celsius" class="${"metric"===n.type?"selected":""}">°C</button>\n                        <button id="fahrenheit" class="${"imperial"===n.type?"selected":""}">°F</button>\n                    </div>\n                </div>\n                <div class="time">\n                    <h3>${n.time}</h3>\n                    <h3>${n.condition}</h3>\n                </div>\n                <div class="info">\n                    <p>Precipitation: ${n.precipitation}%</p>\n                    <p>Humidity: ${n.humidity}%</p>\n                    <p>Wind: ${n.wind} ${n.speedUnit}</p>\n                </div>\n            </div>\n        </div>\n    \n        <h2 class="location">${n.address}</h2>\n    \n        <nav>\n            ${this.currentWeek.map(((e,r)=>`\n                <div class="day ${e===n?"selected":""}" id="${r}">\n                    <h4>${e.shortDay}</h4>\n                    <img src="${v[e.icon]||v["clear-day"]}" alt="${e.condition}">\n                    <div>\n                        <p class="high">${e.max}°</p>\n                        <p class="low">${e.min}°</p>\n                    </div>\n                </div>`)).join("")}\n        </nav>`}}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,